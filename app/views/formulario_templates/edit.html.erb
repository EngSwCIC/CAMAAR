<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSON Templates</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            display: flex;
            background-color: #f0f0f0;
        }
        .content {
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
        }
        h1 {
            margin-bottom: 20px;
        }
        #search-bar {
            margin-bottom: 20px;
            width: 100%;
            max-width: 500px;
        }
        #search-input {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 2px solid purple;
            border-radius: 5px;
        }
        #buttons-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            width: 100%;
            max-width: 1400px;
        }
        .button {
            padding: 20px;
            background-color: white;
            color: black;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            font-size: 20px;
            border: 3px solid purple;
            transition: 0.5s;
        }
        .button:hover {
            background-color: purple;
            transform: scale(1.1);
        }
        /* Modal styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
            padding-top: 60px;
        }
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
            max-width: 500px;
            text-align: center;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .modal-button {
            padding: 10px 20px;
            margin: 10px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }
        .view-button {
            background-color: #4CAF50;
            color: white;
            transition: 0.25s;
        }
        .view-button:hover {
            background-color: purple;
            transform: scale(1.05);
            border-radius: 20px;
        }
        .delete-button {
            background-color: #f44336;
            color: white;
            transition: 0.25s;
        }
        .delete-button:hover {
            background-color: darkred;
            transform: scale(1.05);
            border-radius: 20px;
        }
        .template-name {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
            text-align: center;
        }
        .button-create-template {
            margin: auto;
            background-color: purple;
            color: white;
            border-radius: 50%;
            cursor: pointer;
            font-size: 30px;
            margin-bottom: 20px;
            width: 50px; /* Define a largura e a altura inicial do botão */
            height: 50px; /* Define a largura e a altura inicial do botão */
            display: flex;
            justify-content: center;
            align-items: center;
            transition: 0.5s;
            border: none; /* Remove qualquer borda padrão */
        }
        .button-create-template:hover {
            background-color: gray;
            transform: scale(1.3);
            border-radius: 10px;
        }


        
        /* Navbar styles */
        .sidebar {
            height: 100%;
            width: 200px;
            position: fixed;
            z-index: 2;
            top: 0;
            left: 0;
            background-color: white;
            overflow-x: hidden;
            padding-top: 20px;
            display: none; /* Initially hidden */
            flex-direction: column;
            align-items: center;
        }
        .sidebar a {
            width: 80%;
            padding: 15px;
            text-decoration: none;
            font-size: 20px;
            color: white;
            display: block;
            text-align: center;
            background-color: purple;
            border-radius: 25px;
            transition: 0.5s;
        }
        .sidebar a:hover {
            background-color: darkviolet;
            border-radius: 10px;
            transform: scale(1.1);
            transform: translateY(-10px);
            
        }
        /* Overlay styles */
        .overlay {
            display: none; /* Initially hidden */
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1;
        }
        /* Hamburger button styles */
        .hamburger {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 3;
            width: 30px;
            height: 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            cursor: pointer;
        }

        .hamburger div {
            width: 100%;
            height: 4px;
            background-color: black;
        }
        .hamburger:hover div {
            width: 100%;
            height: 4px;
            background-color: purple;
        }
    </style>
</head>
<body>
    <div class="hamburger" onclick="toggleNavbar()">
        <div></div>
        <div></div>
        <div></div>
    </div>

    <div class="overlay" onclick="toggleNavbar()"></div>

    <div class="sidebar">
        <br><br><br>
        <a id="force-reload-linkF" href="<%= formularios_path %>">Formulários</a>
        <br>
        <a id="force-reload-linkT" href="<%= edit_template_path %>">Templates</a>
        <br>
        <a href="<%= departamentos_path %>">Departamentos</a>
        <script> document.getElementById("force-reload-linkF").addEventListener("click", function(event) { event.preventDefault(); window.location.href = this.href + "?timestamp=" + new Date().getTime(); }); </script>
        <script> document.getElementById("force-reload-linkT").addEventListener("click", function(event) { event.preventDefault(); window.location.href = this.href + "?timestamp=" + new Date().getTime(); }); </script>
    </div>

    <div class="content">
        <br><br>
        <h1>Templates</h1>
        <div id="search-bar">
            <input type="text" id="search-input" onkeyup="searchTemplates()" placeholder="Pesquisar templates...">
        </div>
        <div id="buttons-container">
            <% @files.each do |file| %>
                <button class="button" onclick="handleButtonClick('<%= file %>')" data-name="<%= file %>"><%= file.split('.json')[0] %></button>
            <% end %>

            <%= link_to "+", new_formulario_template_path, id: "force-reload-link", class: "button-create-template" %>
            <script>
                document.getElementById("force-reload-link").addEventListener("click", function(event) {
                    event.preventDefault();
                    window.location.href = this.href + "?timestamp=" + new Date().getTime();
                });
            </script>
        </div>
    </div>

    <!-- The Modal for actions -->
    <div id="fileModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <p id="modalText"></p>
            <button class="modal-button view-button" onclick="viewFile()">Visualizar</button>
            <button class="modal-button delete-button" onclick="deleteFile()">Deletar</button>
        </div>
    </div>

    <!-- The Modal for viewing content -->
    <div id="viewModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeViewModal()">&times;</span>
            <div class="template-name" id="templateName"></div>
            <div id="fileContent" style="white-space: pre-wrap; text-align: left;"></div>
        </div>
    </div>
    
    <script>
        let selectedFile = '';
        let fileNoExtension = '';

        function handleButtonClick(file) {
            selectedFile = file;
            fileNoExtension = file.split('.json')[0];
            document.getElementById('modalText').innerText = `Template ${fileNoExtension}`;
            document.getElementById('fileModal').style.display = "block";
        }

        function closeModal() {
            document.getElementById('fileModal').style.display = "none";
        }

        function closeViewModal() {
            document.getElementById('viewModal').style.display = "none";
        }

        function viewFile() {
            fetch(`/view_file?file_name=${selectedFile}`)
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    const content = JSON.parse(data.content);
                    const templateName = content.templateName;
                    const questions = content.questions;

                    document.getElementById('templateName').innerText = templateName;
                    
                    let formattedContent = '';
                    questions.forEach((question, index) => {
                        const questionType = question.type;
                        if (questionType === 'text') {
                            formattedContent += `Questão ${index + 1} (${questionType})<br>`;
                        } else {
                            const optionsCount = question.options ? question.options.length : 0;
                            formattedContent += `Questão ${index + 1} (${questionType}, ${optionsCount} opções)<br>`;
                        }
                    });

                    document.getElementById('fileContent').innerHTML = formattedContent;
                    closeModal();
                    document.getElementById('viewModal').style.display = "block";
                } else {
                    alert(data.message);
                }
            })
            .catch(error => console.error('Error:', error));
        }

        function deleteFile() {
            if (confirm('Are you sure you want to delete this file?')) {
                fetch(`/delete_file?file_name=${selectedFile}`, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                    }
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    if (data.status === 'success') {
                        location.reload();
                    }
                })
                .catch(error => console.error('Error:', error));
            }
            closeModal();
        }

        // Close the modal when the user clicks anywhere outside of the modal
        window.onclick = function(event) {
            if (event.target == document.getElementById('fileModal')) {
                closeModal();
            }
            if (event.target == document.getElementById('viewModal')) {
                closeViewModal();
            }
        }

        function searchTemplates() {
            let input, filter, buttons, button, i, txtValue;
            input = document.getElementById('search-input');
            filter = input.value.toUpperCase();
            buttons = document.getElementById("buttons-container").getElementsByClassName('button');
            for (i = 0; i < buttons.length; i++) {
                button = buttons[i];
                txtValue = button.textContent || button.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    buttons[i].style.display = "";
                } else {
                    buttons[i].style.display = "none";
                }
            }
        }

        function toggleNavbar() {
            var sidebar = document.querySelector('.sidebar');
            var overlay = document.querySelector('.overlay');
            if (sidebar.style.display === "none" || sidebar.style.display === "") {
                sidebar.style.display = "flex";
                overlay.style.display = "block";
            } else {
                sidebar.style.display = "none";
                overlay.style.display = "none";
            }
        }
    </script>

</body>
</html>
