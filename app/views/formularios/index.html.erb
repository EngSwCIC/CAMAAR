<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulários</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #f0f0f0;
        }
        h1 {
            margin-bottom: 20px;
        }
        #search-bar {
            margin-bottom: 20px;
            width: 100%;
            max-width: 500px;
        }
        #search-input {
            width: 100%;
            padding: 10px;
            font-size: 16px;
            border: 2px solid purple;
            border-radius: 5px;
        }
        #buttons-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            width: 100%;
            max-width: 1400px;
        }
        .button {
            padding: 20px;
            background-color: white;
            color: black;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            font-size: 20px;
            border: 3px solid purple;
            transition: 0.5s;
        }
        .button .value1 {
            font-size: 24px;
            font-weight: bold;
        }
        .button .value2,
        .button .value3 {
            font-size: 20px;
            color: gray;
        }
        .button:hover {
            background-color: purple;
            transform: scale(1.1);
        }
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
            padding-top: 60px;
        }
        .modal-content {
            background-color: #fefefe;
            margin: 5% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
            max-width: 500px;
            text-align: center;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .modal-button {
            padding: 10px 20px;
            margin: 10px;
            font-size: 16px;
            border: none;
            cursor: pointer;
        }
        .view-button {
            background-color: #4CAF50;
            color: white;
            transition: 0.25s;
        }
        .view-button:hover {
            background-color: purple;
            transform: scale(1.05);
            border-radius: 20px;
        }
        .delete-button {
            background-color: #f44336;
            color: white;
            transition: 0.25s;
        }
        .delete-button:hover {
            background-color: darkred;
            transform: scale(1.05);
            border-radius: 20px;
        }
        .template-name {
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 20px;
            text-align: center;
        }
        .button-create-template {
            margin: auto;
            background-color: purple;
            color: white;
            border-radius: 50%;
            cursor: pointer;
            font-size: 30px;
            margin-bottom: 20px;
            width: 50px; /* Define a largura e a altura inicial do botão */
            height: 50px; /* Define a largura e a altura inicial do botão */
            display: flex;
            justify-content: center;
            align-items: center;
            transition: 0.5s;
            border: none; /* Remove qualquer borda padrão */
        }
        .button-create-template:hover {
            background-color: gray;
            transform: scale(1.3);
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <h1>Formulários</h1>
    <div id="search-bar">
        <input type="text" id="search-input" onkeyup="searchForms()" placeholder="Pesquisar formulários...">
    </div>
    <div id="buttons-container">
        <% @files.each do |file| %>
            <% values = file.split('.json')[0].split('-') %>
            <button class="button" onclick="handleButtonClick('<%= file %>')" data-name="<%= file %>">
                <div class="value1"><%= values[0] %></div>
                <div class="value2">Professor: <%= values[1] %></div>
                <div class="value3">Semestre: <%= values[2] %></div>
            </button>
        <% end %>

        <%= link_to "+", new_formulario_path, id: "force-reload-link", class: "button-create-template" %>
        <script>
            document.getElementById("force-reload-link").addEventListener("click", function(event) {
                event.preventDefault();
                window.location.href = this.href + "?timestamp=" + new Date().getTime();
            });
        </script>
    </div>

    <!-- The Modal for actions -->
    <div id="fileModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <p id="modalText"></p>
            <button class="modal-button view-button" onclick="viewFile()">Vizualizar</button>
            <button class="modal-button delete-button" onclick="deleteFile()">Deletar</button>
        </div>
    </div>

    <!-- The Modal for viewing content -->
    <div id="viewModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeViewModal()">&times;</span>
            <div class="template-name" id="templateName"></div>
            <div id="fileContent" style="white-space: pre-wrap; text-align: left;"></div>
        </div>
    </div>
    
    <script>
        let selectedFile = '';
        let fileNoExtension = '';

        function handleButtonClick(file) {
            selectedFile = file;
            fileNoExtension = file.split('.json')[0];
            document.getElementById('modalText').innerText = `Template ${fileNoExtension}`;
            document.getElementById('fileModal').style.display = "block";
        }

        function closeModal() {
            document.getElementById('fileModal').style.display = "none";
        }

        function closeViewModal() {
            document.getElementById('viewModal').style.display = "none";
        }

        function viewFile() {
    fetch(`/view_file_form?file_name=${selectedFile}`)
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            const content = JSON.parse(data.content);
            
            let formattedContent = '<div style="font-family: Arial, sans-serif; line-height: 1.6;">';
            formattedContent += '<h2 style="color: purple;">Dados do Formulário</h2>';
            
            // Iterando sobre as propriedades do JSON
            for (const key in content) {
                let displayKey = key;
                if (key === 'name') displayKey = 'Nome do Formulário';
                if (key === 'semester') displayKey = 'Semestre';
                if (key === 'questions') displayKey = 'Questões';
                if (key === 'professor') displayKey = 'Professor';

                if (Array.isArray(content[key])) {
                    formattedContent += `<br><h3 style="color: #2196F3;">${displayKey}:</h3>`;
                    content[key].forEach((item, index) => {
                        let itemType = item.type ? ` (${item.type})` : '';
                        formattedContent += `<div style="margin-bottom: 15px; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">`;
                        formattedContent += `<strong>Questão ${index + 1}: ${itemType}</strong><br>`;
                        for (const subKey in item) {
                            let displaySubKey = subKey;
                            if (subKey === 'question') displaySubKey = 'Pergunta';
                            if (subKey === 'type') {
                                continue;
                            }
                            if (subKey === 'options' && item['type'] === 'text') {
                                continue;
                            }
                            if (subKey === 'options') displaySubKey = 'Opções';

                            if (Array.isArray(item[subKey])) {
                                formattedContent += `<strong>${displaySubKey}:</strong><br>`;
                                item[subKey].forEach((option, optIndex) => {
                                    formattedContent += `&nbsp;&nbsp;&nbsp;&nbsp;${optIndex + 1}. ${option}<br>`;
                                });
                            } else {
                                formattedContent += `<strong>${displaySubKey}:</strong> ${item[subKey]}<br>`;
                            }
                        }
                        formattedContent += `</div>`;
                    });
                } else {
                    formattedContent += `<strong style="color: #FF5722;">${displayKey}:</strong> ${content[key]}<br>`;
                }
            }

            formattedContent += '</div>';

            document.getElementById('fileContent').innerHTML = formattedContent;
            closeModal();
            document.getElementById('viewModal').style.display = "block";
        } else {
            alert(data.message);
        }
    })
    .catch(error => console.error('Error:', error));
}

        function deleteFile() {
            if (confirm('Você tem certeza de que deseja deletar este arquivo?')) {
                fetch(`/delete_file_form?file_name=${selectedFile}`, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
                    }
                })
                .then(response => response.json())
                .then(data => {
                    alert(data.message);
                    if (data.status === 'success') {
                        location.reload();
                    }
                })
                .catch(error => console.error('Error:', error));
            }
            closeModal();
        }

        // Close the modal when the user clicks anywhere outside of the modal
        window.onclick = function(event) {
            if (event.target == document.getElementById('fileModal')) {
                closeModal();
            }
            if (event.target == document.getElementById('viewModal')) {
                closeViewModal();
            }
        }

        function searchForms() {
            let input, filter, buttons, button, i, txtValue;
            input = document.getElementById('search-input');
            filter = input.value.toUpperCase();
            buttons = document.getElementById("buttons-container").getElementsByClassName('button');
            for (i = 0; i < buttons.length; i++) {
                button = buttons[i];
                txtValue = button.textContent || button.innerText;
                if (txtValue.toUpperCase().indexOf(filter) > -1) {
                    buttons[i].style.display = "";
                } else {
                    buttons[i].style.display = "none";
                }
            }
        }
    </script>

</body>
</html>
